name: Data pipeline

on:
  workflow_dispatch:

jobs:
  fetch_city_data:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    outputs:
      sha_new: ${{ steps.sha_new_outputs_SHA_NEW }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DVC
        uses: iterative/setup-dvc@v1
      - name: Download data with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer
          dvc pull -v -f -r origin
      - name: Install dependencies
        run: |
          cd forecast-model-trainer
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --without dev
      - name: Run auto fetch data
        run: |
          cd forecast-model-trainer
          poetry run python data_processor/fetch_city_data.py
      - name: Add data to storage with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer
          dvc add ./data/
          dvc push -r origin
      - name: Commit and Push Changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git rm -r --cached .
          git add .
          git commit -m "Updated raw data on `date` with GitHub Actions"
          git push origin main
      - name: Save git HEAD sha
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  process_city_data:
    needs: fetch_city_data
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]
    outputs:
      sha_new: ${{ steps.sha_new_outputs_SHA_NEW }}
    permissions:
      contents: write
    steps:
      - env:
          SHA_NEW: ${{ needs.fetch_city_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.fetch_city_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DVC
        uses: iterative/setup-dvc@v1
      - name: Download data with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer
          git pull
          dvc pull -v -f -r origin
      - name: Install dependencies
        run: |
          cd forecast-model-trainer
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --without dev
      - name: Run auto fetch data
        run: |
          cd forecast-model-trainer
          poetry run python data_processor/process_city_data.py
      - name: Add data to storage with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer
          dvc add ./data/
          dvc push -r origin
      - name: Commit and Push Changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git rm -r --cached .
          git add .
          git commit -m "Updated raw data on `date` with GitHub Actions"
          git push origin main
      - name: Save git HEAD sha
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  validate_and_test_city_weather_data:
    needs: process_city_data
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]
    outputs:
      sha_new: ${{ steps.sha_new_outputs_SHA_NEW }}
    permissions:
      contents: write
    steps:
      - env:
          SHA_NEW: ${{ needs.process_city_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.process_city_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DVC
        uses: iterative/setup-dvc@v1
      - name: Download data with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer
          git pull
          dvc pull -v -f -r origin
      - name: Install dependencies
        run: |
          cd forecast-model-trainer
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --without dev
      - name: Check with evidently
        run: |
          cd forecast-model-trainer
          poetry run python data_quality/check_city_quality.py
      - name: Deploy data drift for Celje to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Celje"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_CELJE }}
      - name: Deploy data drift for Koper to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Koper"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_KOPER }}
      - name: Deploy data drift for Kranj to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Kranj"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_KRANJ }}
      - name: Deploy data drift for Ljubljana to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Ljubljana"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_LJUBLJANA }}
      - name: Deploy data drift for Maribor to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Maribor"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_MARIBOR }}
      - name: Deploy data drift for Murska Sobota to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Murska_Sobota"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_MURSKA_SOBOTA }}
      - name: Deploy data drift for Novo Mesto to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Novo_Mesto"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_NOVO_MESTO }}
      - name: Deploy data drift for Ptuj to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "forecast-model-trainer/reports/data_reports/Ptuj"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DATA_DRIFT_PTUJ }}
      - name: Save git HEAD sha
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  split_city_weather_data:
    needs: validate_and_test_city_weather_data
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]
    outputs:
      sha_new: ${{ steps.sha_new_outputs_SHA_NEW }}
    permissions:
      contents: write
    steps:
      - env:
          SHA_NEW: ${{ needs.validate_and_test_city_weather_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.validate_and_test_city_weather_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DVC
        uses: iterative/setup-dvc@v1
      - name: Download data with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer/
          git pull
          dvc pull -v -f -r origin
      - name: Install dependencies
        run: |
          cd forecast-model-trainer/ 
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root --without dev
      - name: Run auto fetch data
        run: |
          cd forecast-model-trainer/
          poetry run python data_processor/split_city_data.py
      - name: Add data to storage with DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd forecast-model-trainer/
          dvc add ./data/
          dvc push -r origin
      - name: Commit and Push Changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git rm -r --cached .
          git add .
          git commit -m "Updated raw data on `date` with GitHub Actions"
          git push origin main
      - name: Save git HEAD sha
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"